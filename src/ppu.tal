(
@|ppu )

( For each mode 0-3, if the given ppuDot has been exceeded, call the associated handler )
( The purpose of this approach is to reduce the unique checks performed per instruction loop )
@modeJumpTable ( 0: hblank, 1: vblank, 2: oam scan, 3: rendering )
[ 01c7 =scanlineDone 01c7 =vblankScanlineDone 004f =oamScan 0105 =renderScanline ]

@oamScan
  ( Note: OAM scan is actually a part of the renderScanline call right now, which means we check for sprites late in the line... )
  #fc AND #03 ORA ( set STAT mode to drawing [3], explicity set to 3 to handle case when LCD recently turned on )
  ROT ROT STA
;on-frame/doneModeCycle JMP2

@renderScanline
  DUP #08 AND #00 EQU ,&noStatHblank JCN 
    ;io/rIF LDAk #02 ORA ROT ROT STA ( request STAT hblank interrupt if enabled )
  &noStatHblank
  #fc AND ( set STAT mode to HBlank [0], length not adjusted for sprites/etc )
  ROT ROT STA

  LIT2 &skipThisFrame [ $1 ] _on-frame/doneModeCycle JCN ( frame skip condition is injected directly here for a quick exit )

  ( perform rendering of this scanline now, since we don't want changes to LCDC/etc during hblank to affect this line )

  ( draw scanline )
  #00 ;io/rLY LDA .Screen/y DEO2 ( set varvara Y coordinate )
  #0000 .Screen/x DEO2 ( set varvara X coordinate )
  #01 .Screen/auto DEO ( set varvara auto X )

  ( TODO: See if writing 8 scanlines progressively to a buffer of 2bpp tiles in UXN RAM and then using
    two 10-tile Screen/sprite calls is faster than this per-pixel drawing. Though uxnemu seems faster
    than uxn32 in this regard, so it might depend on the host VM. )

  LIT2r =oamScanTable ( setup pointer to store sprites for this scanline )
  #02 ;io/rLCDC LDA AND #00 EQU ;&skipOAMScan JCN2 ( check if sprites are enabled )

    ( Perform OAM scan, identifying the first 10 sprites which are visible on this scanline. Copy the required
      data to render each sprite on this line to the oamScanTable for use during rendering. )
    
    ( calculate sprite XOR value and height for visibility calculation, write ahead )
    #0f [ #04 ;io/rLCDC LDA AND ,&tallSprites JCN POP #07 &tallSprites ] 
      DUP ,&spriteYXOR STR
      DUP #03 SFT #ff EOR ,&tileIDMask STR ( AND mask for bit0 of tileID for 8x16 sprites )
      INC ,&spriteHeight STR
    ;io/rLY LDA #10 ADD ,&lyPlus16 STR ( write LY+16 ahead )

    #2800 ( setup 0-40 counter, for the 40 sprite entries )
    &oamScanLoop
      ( wst: ? ? ? ? #a0 px bgPxColor #28 lowAddr )
      ( rst: )

      #fe OVR #20 SFT ( point to OAM entry )
      LDAk ( read Y ) LIT [ &lyPlus16 $1 ] SWP SUB ( spriteY = LY + 16 - Y ) 
        DUP LIT [ &spriteHeight $1 ] LTH ,&yVisible JCN POP POP2 ,&nextSprite JMP ( not visible based on height )
        &yVisible ,&spriteY STR ( write ahead )

      INC ( advance to X )
      LDAk STH ( read X, move to rst )
      INC ( advance to tileID )
      LDA2 STH2 ( read tileID, attr and move to rst )
      DUPr LITr _&attr STRr ( push attr ahead for caching )

      ( yOffset = ( spriteY ^ 7|0 ) * 2 )
      LIT2 [  &spriteY $1 &spriteYXOR $1 ] STHr #40 AND ,&vFlip JCN POP #00 &vFlip EOR #10 SFT ,&ySprOffset STR

      ( wst: #28 lowAddr )
      ( rst: oamScanTable* X tileID )

      LIT2 00 [ &ySprOffset $1 ]

      #00 STHr ( setup tileID as short )
      LIT [ &tileIDMask $1 ] AND ( clear bit0 for 8x16 mode )
      #40 SFT2 ( * 16 )
      #8000 ADD2 ( add tile data base addr )
      ADD2 ( yOffset + addr to get addr of sprite tile data )

      STHr ( move X back to wst )
      ( wst: #28 lowAddr tileAddr X )
      ( rst: oamScanTable* )

      ( Store in oamScanTable: X high low attr )
      STH2kr STA INC2r ( write X to oamScanLoop, inc ptr )
      LDAk ( get tile low byte )
      STH2kr STA INC2r ( write tileLowByte to oamScanTable, inc ptr )
      INC2 LDA ( get tile high byte )
      STH2kr STA INC2r ( write tileHighByte to oamScanTable, inc ptr )
      LIT [ &attr $1 ] ( attr byte )
      STH2kr STA INC2r ( write attr to oamScanTable, inc ptr )

      ( wst: #28 lowAddr )
      ( rst: oamScanTable* )

      ( the oamScanTable is aligned such that when we reach 10 entries the low byte will be zero )
      DUPr LITr 00 EQUr LITr _&reached10Sprites JCNr

    &nextSprite
    INC GTHk ,&oamScanLoop JCN
  &reached10Sprites
  POP2

  &skipOAMScan
  LITr ff ROTr ROTr STAr ( write table teriminator, either to skip sprites entirely OR for the end of the table content )

  ( Pre-calculate and STR ahead as many values that are static for the scanline as possible, for speed )
  #01 ;io/rLCDC LDA AND ,&isBGEnabled STR
  #20 ;io/rLCDC LDA AND #00 EQU ( check if window is disabled in rLCDC )
    ;io/rLY LDA ;io/rWY LDA LTH ORA ( or LY < WY )
    ;io/rWX LDA #a6 GTH ORA ( or WX > 166 )
      DUP ,&isWinInactive STR ( then the window is inactive this scanline )
      ,&skipWinVariables JCN
        ;io/rWX LDA ,&wx STR ( Can't pre-calculate WX-7 because WX values of 0-6 result in negative value, breaking the LTH check )
        ;WLY LDAk 
          DUP ,&WLY STR ( yOffset = WLY )
        INC ROT ROT STA ( increment WLY for the next scanline only when the window is active )
      &skipWinVariables
  ;io/rLY LDA ;io/rSCY LDA ADD ,&lyPlusSCY STR ( yOffset = LY + SCY )
  #10 ;io/rLCDC LDA AND #10 EQU ,&isTileBlock0Cache STR ( are bg/win using tile block 0? )

  #a000 ( setup 0-160 pixel counter )
  &pxLoop
    ( Is BG enabled? If not, set bgPxColor to 0 and jump to sprite handling )
    LIT2 &isBGEnabled [ $1 _&bgEnabled ] JCN #00 ( bgPxColor = 0 ) ;&sprites JMP2
    &bgEnabled ( applies to window as well on DMG )

    ( Is window active this scanline? )
    LIT2 [ &isWinInactive $1 _&drawBackground ] JCN
      DUP #07 ADD LIT [ &wx $1 ] LTHk ,&notYetWindow JCN ( Is px + 7 >= WX? )
        SUB ( xOffset = px - ( WX - 7 ) )
        DUP ,&xOffsetCache STR ( copy for later )
        #ff ;bgwinMaskedXOffset STA ( Invalidated xOffset cache to trigger tilemap/data fetch )
      LIT2 00 [ &WLY $1 ] ( yOffset = WLY )
        #40 ,&lcdcTilemapMask STR
      ,&readTilemap JMP
    &notYetWindow
    POP2 ( discard px, ( WX - 7 ) )

    &drawBackground
    DUP ;io/rSCX LDA ADD ( xOffset = px + SCX )
      DUP ,&xOffsetCache STR ( copy for later )
    LIT2 00 [ &lyPlusSCY $1 ] ( yOffset = LY + SCY )
      #08 ,&lcdcTilemapMask STR

    &readTilemap
    ( wst: a0 pxCount xOffset yOffsetShort )

    ( Check cached xOffset to determine if it's empty )
    ( Note: This is SLIGHTLY faster than not caching the data, confirmed through testing. Though I'd like
      to find a way to further optimize it. )
    LIT2r =bgwinMaskedXOffset LDAr ( read cached maskedXOffset )
    DUPr LITr ff EQUr LITr _&loadNewBgWinTile JCNr ( check if we need new tile data )
      POP2 POP ( discard yOffset and xOffset from wst )
      ;bgwinTileDataHigh LDA ( read high byte onto wst )
      STHkr ( copy bgwinMaskedXOffset to wst )
      DUP #01 SUB ;bgwinMaskedXOffset STA ( decrement for next pass )
      LIT2r =bgwinTileDataLow LDAr ( read low byte onto rst )
      SWPr ( swap bgwinMaskedXOffset and low byte on rst )
      ;&resumeBgWinTileRender JMP2 ( jump to rendering now that we're ready )
    &loadNewBgWinTile
    POPr ( discard old bgwinMaskedXOffset )

    LIT2 [ &isTileBlock0Cache $1 &xOffsetCache $1 ]
      ,&xOffset STR ( push xOffset along, TODO: remove if distance shortens enough )
      ,&isTileBlock0 STR ( push isTileBlock0 along, TODO: remove if distance shortens enough )

      DUP ,&yOffset STR ( copy for later )
      #53 SFT2 ( yOffset / * 32 )
    ROT ( move xOffset byte to top of wst )
      #03 SFT ( xOffset / 8 )
      #00 SWP ( convert to short )
    #0006 ( setup for $9800 )
      LIT [ &lcdcTilemapMask $1 ] ;io/rLCDC LDA AND ( check LCDC tilemap bit )
      #00 EQU ,&firstTilemap JCN INC &firstTilemap ( if tilemap bit set, increment base value )
    #a0 SFT2 #8000 ADD2 ( calculate tilemap base address, $9800 or $9c00, from $8000 + 6|7 << 10 )

    ADD2 ADD2 ( baseAddr + yOffset + xOffset = tilemap VRAM addr )
    LDA ,&tileID STR ( read tileID from tilemap, write ahead for seeking tile data )

    ( #82 ;io/rLCDC LDA NEQ ,&noBRK JCN DBG &noBRK ( break on LCDC==#82 ) )

    #00 LIT [ &yOffset $1 ] #07 AND #10 SFT ( yOffset % 8 * 2 )

    LIT2 00 [ &tileID $1 ] ( setup tileID as short )
    LIT2 [ &isTileBlock0 $1 _&tileBlock0 ] JCN
      #ff OVR #07 SFT ,&negativeTileID JCN POP #00 &negativeTileID OVR ( sign extension )
      NIP2 ( discard entire original tileID -> TODO: find a way to consume it instead )
      #0100 ADD2 ( tileBlock1 ) 
    &tileBlock0
    #40 SFT2 ( * 16 )
    #8000 ADD2 ( add tile data base addr )

    ADD2 ( addr + yOffset component to get addr of bg/win tile data )

    LDAk STHk ;bgwinTileDataLow STA ( get tile low byte, move to rst and cache )
    INC2 LDA DUP ;bgwinTileDataHigh STA ( get tile high byte, copy to cache )

    LIT [ &xOffset $1 ] #07 EORk AND NIP ( xOffset = ( xOffset ^ 7 ) & 7 )
    STHk ( copy xOffset to rst )

    DUP #01 SUB ;bgwinMaskedXOffset STA ( cache masked xOffset to fast-track bg/win rendering for the next pixel )

    &resumeBgWinTileRender

    ( px color = ( high >> xOffset ) % 2 * 2 + ( low >> xOffset ) % 2 )
    SFT #01 AND #10 SFT ( high bit )
    STH2r ( recover low byte and xOffset from rst )
    SFT #01 AND ( low bit )
    ADD ( final bg/win pixel color! )

    #47 ;pxPaletteAddr STA ( default to bg/win palette )

    ( Sprites! )
    &sprites

    ( wst: ? ? ? ? #a0 px bgPxColor )
    ( rst: )

    OVR #08 ADD ,&pxPlus8 STR ( write px+8 ahead, which is a waste if there are no visible sprites... )

    LIT2r =oamScanTable ( point at oamScanTable, which tracks visible sprites this scanline )
    &spriteLoop
      ( wst: ? ? ? ? #a0 px bgPxColor )
      ( rst: oamScanTable* )

      LDAkr ( read X/terminator )
      DUPr LITr ff EQUr LIT2r =&endOfTable JCN2r ( check for table terminator )
      LITr [ &pxPlus8 $1 ] SWPr SUBr ( spriteX = px + 8 - X )
        DUPr LITr 08 LTHr LITr _&xVisible JCNr
          POPr INC2r INC2r INC2r INC2r LITr _&spriteLoop JMPr ( not visible based on width, advance to next entry )
        &xVisible

      LITr _&X STRr ( push X ahead )

      ( wst: )
      ( rst: oamScanTable* )

      INC2r LDAkr STHr ( read tileHighByte, move to wst )
      INC2r LDAkr STHr ( read tileLowByte, move to wst )
      INC2r LDAkr ( read attr )

      ( wst: tileHighByte tileLowByte  )
      ( rst: oamScanTable* attr )

      ( xOffset = ( spriteX ^ 0|7 ) )
      LITr 00 OVRr LITr 20 ANDr LITr _&hFlip JCNr POPr LITr 07 &hFlip ( get 0 or 7 to EOR X with based on attr byte )
      LITr [ &X $1 ] EORr ( X is STR'd here earlier )
      STHkr ( copy xOffset to wst )
      SWP ( get xOffset into place for high byte )
      STHr ( move xOffset into place for low byte )

      ( wst: tileHighByte xOffset tileLowByte xOffset )
      ( rst: oamScanTable* attr )

      ( px color = ( high >> xOffset ) % 2 * 2 + ( low >> xOffset ) % 2 )
      SFT #01 AND #10 SFT ( high bit )
      ROT ROT
      SFT #01 AND ( low bit )
      ADD ( final sprite pixel color! )

      ( wst: #a0 px bgPxColor sprPxColor )
      ( rst: oamScanTable* attr )

      ( decide if we should show the bg/win or sprite pixel color )
      DUP #00 NEQ ,&sprPxOpaque JCN ( sprPx transparent, don't draw ) POP POPr INC2r ,&spriteLoop JMP
      &sprPxOpaque
        STHkr ( copy attr ) #80 AND ( check sprite's BG priority bit ) #00 NEQ ,&checkBgPxColor JCN
          ( no BG priority, draw sprite )
          NIP ( discard bgPxColor )
        &handleSprPalette
          #48 ( lowAddr of OBP0 )
          STHr ( recover attr byte )
          #10 AND #04 SFT ADD ( Add shifted palette bit onto lowAddr )
          ;pxPaletteAddr STA ( store for drawing )
          ,&palettes JMP ( jump to draw this sprite pixel )
        &checkBgPxColor
        ( check if BG color 1-3 )
        STH ( move sprPxColor to rst ) DUP ( get copy of bgPxColor )
        #00 EQU ,&showSprPx JCN ( BG has priority and is color 1-3, skip this sprite ) POP2r INC2r ;&spriteLoop JMP2
        &showSprPx
          POP ( discard bgPxColor )
          STHr ( recover sprPxColor from rst )
          ,&handleSprPalette JMP

    &endOfTable
    POPr ( discard X/terminator )

    ( apply palette to final pixel color )
    &palettes
    POP2r ( discard oamScanTable* )

    #10 SFT ( color * 2 = shift count )
    #ff ;pxPaletteAddr LDA ( get palette addr )
    LDA ( get palette value )
    SWP ( swap color/shift )
    SFT ( shift palette to get color in bit 0-1 )
    #03 AND ( mask off extra bits )

    #80 ADD ( enable 2bpp mode )
    .Screen/pixel DEO ( draw pixel, at last! )

  INC GTHk ;&pxLoop JCN2
  POP2 ( discard pixel counter )

;on-frame/doneModeCycle JMP2

@vblankScanlineDone
  POP POP2 ( discard STAT value and addr )
  ,scanlineDone/doneModeAdvance JMP

@scanlineDone
  ( for non-vblank scanlines, advance from hblank [0] to OAM search [2] )
  INC INC ROT ROT STAk POP2 ( set STAT mode to OAM search [2], mode 2 always follows 0, so INC INC works )
  #20 AND #00 EQU ,&noStatOAM JCN 
    ;io/rIF LDAk #02 ORA ROT ROT STA ( request STAT OAM interrupt if enabled )
  &noStatOAM

  &doneModeAdvance
  ;io/rLY LDAk ( get current LY ) INC ( increment LY )

  ;io/rSTAT LDA #40 AND #00 EQU ,&noStatLYC JCN 
    DUP ;io/rLYC LDA NEQ ,&lyNEQlyc JCN
      ;io/rIF LDAk #02 ORA ROT ROT STA ( request STAT LYC interrupt if enabled )
  &noStatLYC
  &lyNEQlyc

  DUP #9a LTH ,&not-new-frame ( check if we're done VBlank )
    JCN POP #00 ( reset to LY = 0 )
    DUP ;WLY STA ( reset WLY for next frame )
    ;io/rSTAT LDAk #fc AND #02 ORA ROT ROT STA ( set STAT mode to OAM scan [2] )
  &not-new-frame
  ROT ROT STA ( LY = (LY + 1) % 154 )
  ;ppuDot LDA2k #01c8 SUB2 SWP2 STA2 ( subtract a line of ppuDots off, since we allow overshooting )
  #ff ;bgwinMaskedXOffset STA ( reset bgwinMaskedXOffset for the next scanline )

  ;io/rLY LDA #90 NEQ ,&notVblankStart JCN
    #01 ( setup to enable VBlank IF flag up ahead )
    ;io/rSTAT LDAk #fc AND INC ROT ROT STAk POP2 ( set STAT mode to VBlank [1] )
    #10 AND #00 EQU ,&noStatVBLANK JCN
      INC INC ( increment prepared IF flag addition to include STAT VBlank interrupt )
    &noStatVBLANK
    STH ;io/rIF LDAk STHr ORA ROT ROT STA ( set VBlank and possible STAT VBlank IF flags )

    ( update frameSkip state, TODO: Clean this up, it feels excessively complex )
    ;frameSkipCounter LDAk #01 SUB ( decrement counter )
    #00 NEQk NIP DUP ;renderScanline/skipThisFrame STA ( store skip boolean for next frame )
    ,&skippingNext JCN
      POP ;frameSkip LDA ( reset counter )
    &skippingNext
    ROT ROT STA ( store new counter )
    VBLANK
  &notVblankStart

;on-frame/doneModeCycle JMP2
